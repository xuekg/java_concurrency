那如何实现热部署和热加载呢？它们跟类加载机制有关，具体来说就是：
  .热加载的实现方式是 Web 容器启动一个后台线程，定期检测类文件的变化，如果有变化，就重新加载类，
    在这个过程中不会清空 Session ，一般用在开发环境。
  .热部署原理类似，也是由后台线程定时检测 Web 应用的变化，但它会重新加载整个 Web 应用。
    这种方式会清空 Session，比热加载更加干净、彻底，一般用在生产环境。

Tomcat 通过开启后台线程，使得各个层次的容器组件都有机会完成一些周期性任务。
我们在实际工作中，往往也需要执行一些周期性的任务，比如监控程序周期性拉取系统的健康状态，就可以借鉴这种设计。

Tomcat 的后台线程
  要说开启后台线程做周期性的任务，有经验的同学马上会想到线程池中的 ScheduledThreadPoolExecutor，它除了具有线程池的功能，
  还能够执行周期性的任务。Tomcat 就是通过它来开启后台线程的：

  bgFuture = exec.scheduleWithFixedDelay(
                new ContainerBackgroundProcessor(),// 要执行的 Runnable
                backgroundProcessorDelay, // 第一次执行延迟多久
                backgroundProcessorDelay, // 之后每次执行间隔多久
                TimeUnit.SECONDS);        // 时间单位
  上面的代码调用了 scheduleWithFixedDelay 方法，传入了四个参数，第一个参数就是要周期性执行的任务类 ContainerBackgroundProcessor，
  它是一个 Runnable，同时也是 ContainerBase 的内部类，ContainerBase 是所有容器组件的基类，
  我们来回忆一下容器组件有哪些，有 Engine、Host、Context 和 Wrapper 等，它们具有父子关系。

ContainerBackgroundProcessor 实现
  protected class ContainerBackgroundProcessor implements Runnable {
    @Override
      public void run() {
          Throwable t = null;
          String unexpectedDeathMessage = sm.getString(
                  "containerBase.backgroundProcess.unexpectedThreadDeath",
                  Thread.currentThread().getName());
          try {
              while (!threadDone) {
                  if (!threadDone) {
                      Container parent = (Container) getMappingObject();
                      ClassLoader cl =Thread.currentThread().getContextClassLoader();
                      if (parent.getLoader() != null) {
                          cl = parent.getLoader().getClassLoader();
                      }
                      //// 请注意这里传入的参数是 " 宿主类 " 的实例
                      processChildren(parent, cl);
                  }
              }
          } catch (RuntimeException e) {
          } catch (Error e) {
          } finally {
          }
      }

      protected void processChildren(Container container, ClassLoader cl) {
          try {
              if (container.getLoader() != null) {
                  Thread.currentThread().setContextClassLoader(container.getLoader().getClassLoader());
              }
              //1. 调用当前容器的 backgroundProcess 方法。
              container.backgroundProcess();
          } catch (Throwable t) {
          } finally {
              Thread.currentThread().setContextClassLoader(cl);
          }
          //2. 遍历所有的子容器，递归调用 processChildren，
          // 这样当前容器的子孙都会被处理 
          Container[] children = container.findChildren();
          for (int i = 0; i < children.length; i++) {
              // 这里请你注意，容器基类有个变量叫做 backgroundProcessorDelay ，如果大于 0，表明子容器有自己的后台线程，
              //无需父容器来调用它的 processChildren 方法。
              if (children[i].getBackgroundProcessorDelay() <= 0) {
                  processChildren(children[i], cl);
              }
          }
      }
  }
  请你注意 backgroundProcess 是 Container 接口中的方法，也就是说所有类型的容器都可以实现这个方法，在这个方法里完成需要周期性执行的任务。
  这样的设计意味着什么呢？我们只需要在顶层容器，也就是 Engine 容器中启动一个后台线程，那么这个线程不但会执行 Engine 容器的周期性任务，
  它还会执行所有子容器的周期性任务。

backgroundProcess 方法
  @Override
    public void backgroundProcess() {

        if (!getState().isAvailable())
            return;
        //1. 执行容器中 Cluster 组件的周期性任务
        Cluster cluster = getClusterInternal();
        if (cluster != null) {
            try {
                cluster.backgroundProcess();
            } catch (Exception e) {
                log.warn(sm.getString("containerBase.backgroundProcess.cluster", cluster), e);
            }
        }
        //2. 执行容器中 Realm 组件的周期性任务
        Loader loader = getLoaderInternal();
        if (loader != null) {
            try {
                loader.backgroundProcess();
            } catch (Exception e) {
                log.warn(sm.getString("containerBase.backgroundProcess.loader", loader), e);
            }
        }
        Manager manager = getManagerInternal();
        if (manager != null) {
            try {
                manager.backgroundProcess();
            } catch (Exception e) {
                log.warn(sm.getString("containerBase.backgroundProcess.manager", manager), e);
            }
        }
        Realm realm = getRealmInternal();
        if (realm != null) {
            try {
                realm.backgroundProcess();
            } catch (Exception e) {
                log.warn(sm.getString("containerBase.backgroundProcess.realm", realm), e);
            }
        }
        //3. 执行容器中 Valve 组件的周期性任务
        Valve current = pipeline.getFirst();
        while (current != null) {
            try {
                current.backgroundProcess();
            } catch (Exception e) {
                log.warn(sm.getString("containerBase.backgroundProcess.valve", current), e);
            }
            current = current.getNext();
        }
        //4. 触发容器的 " 周期事件 "，Host 容器的监听器 HostConfig 就靠它来调用
        fireLifecycleEvent(Lifecycle.PERIODIC_EVENT, null);
    }

Tomcat 热加载
  Tomcat 的热加载，就是在 Context 容器中实现的

  WebappLoader 是如何实现热加载的，它主要是调用了 Context 容器的 reload 方法，而 Context 的 reload 方法比较复杂，
  总结起来，主要完成了下面这些任务：
  1.停止和销毁 Context 容器及其所有子容器，子容器其实就是 Wrapper，也就是说 Wrapper 里面 Servlet 实例也被销毁了。
  2.停止和销毁 Context 容器关联的 Listener 和 Filter。
  3.停止和销毁 Context 下的 Pipeline 和各种 Valve。
  4.停止和销毁 Context 的类加载器，以及类加载器加载的类文件资源。
  5.启动 Context 容器，在这个过程中会重新创建前面四步被销毁的资源。

  @Override
    public synchronized void reload() {

        // Validate our current component state
        if (!getState().isAvailable())
            throw new IllegalStateException(sm.getString("standardContext.notStarted", getName()));

        if (log.isInfoEnabled())
            log.info(sm.getString("standardContext.reloadingStarted", getName()));

        // Stop accepting requests temporarily.
        setPaused(true);

        try {
            stop();
        } catch (LifecycleException e) {
            log.error(sm.getString("standardContext.stoppingContext", getName()), e);
        }

        try {
            start();
        } catch (LifecycleException e) {
            log.error(sm.getString("standardContext.startingContext", getName()), e);
        }

        setPaused(false);

        if (log.isInfoEnabled())
            log.info(sm.getString("standardContext.reloadingCompleted",getName()));
    }

    在这个过程中，类加载器发挥着关键作用。一个 Context 容器对应一个类加载器，类加载器在销毁的过程中会把它加载的所有类也全部销毁。
    Context 容器在启动过程中，会创建一个新的类加载器来加载新的类文件。

    在 Context 的 reload 方法里，并没有调用 Session 管理器的 distroy 方法，也就是说这个 Context 关联的 Session 是没有销毁的。
    你还需要注意的是，Tomcat 的热加载默认是关闭的，你需要在 conf 目录下的 Context.xml 文件中设置 reloadable 参数来开启这个功能，
    像下面这样： <Context reloadable="true"/>

Tomcat 热部署
  热部署跟热加载的本质区别是，热部署会重新部署 Web 应用，原来的 Context 对象会整个被销毁掉，
  因此这个 Context 所关联的一切资源都会被销毁，包括 Session。

  那么 Tomcat 热部署又是由哪个容器来实现的呢？应该不是由 Context，因为热部署过程中 Context 容器被销毁了，
  那么这个重担就落在 Host 身上了，因为它是 Context 的父容器。

  跟 Context 不一样，Host 容器并没有在 backgroundProcess 方法中实现周期性检测的任务，
  而是通过监听器 HostConfig 来实现的，HostConfig 就是前面提到的“周期事件”的监听器，那“周期事件”达到时，HostConfig 会做什么事呢？

  public void lifecycleEvent(LifecycleEvent event) {
        // Identify the host we are associated with
        try {
            host = (Host) event.getLifecycle();
            if (host instanceof StandardHost) {
                setCopyXML(((StandardHost) host).isCopyXML());
                setDeployXML(((StandardHost) host).isDeployXML());
                setUnpackWARs(((StandardHost) host).isUnpackWARs());
                setContextClass(((StandardHost) host).getContextClass());
            }
        } catch (ClassCastException e) {
            log.error(sm.getString("hostConfig.cce", event.getLifecycle()), e);
            return;
        }

        // Process the event that has occurred HostConfig是在StandardHost#start的时候通过监听器调用，
        if (event.getType().equals(Lifecycle.PERIODIC_EVENT)) {
            check();
        } else if (event.getType().equals(Lifecycle.BEFORE_START_EVENT)) {
            beforeStart();
        } else if (event.getType().equals(Lifecycle.START_EVENT)) {
            start();
        } else if (event.getType().equals(Lifecycle.STOP_EVENT)) {
            stop();
        }
    }

    protected void check() {

        if (host.getAutoDeploy()) {
            // Check for resources modification to trigger redeployment
            // 检查这个 Host 下所有已经部署的 Web 应用
            DeployedApplication[] apps =
                deployed.values().toArray(new DeployedApplication[0]);
            for (int i = 0; i < apps.length; i++) {
                if (!isServiced(apps[i].name))
                // 检查 Web 应用目录是否有变化
                    checkResources(apps[i], false);
            }

            // Check for old versions of applications that can now be undeployed
            if (host.getUndeployOldVersions()) {
                checkUndeploy();
            }

            // Hotdeploy applications
            deployApps();
        }
    }

    其实 HostConfig 会检查 webapps 目录下的所有 Web 应用：

      如果原来 Web 应用目录被删掉了，就把相应 Context 容器整个销毁掉。
      是否有新的 Web 应用目录放进来了，或者有新的 WAR 包放进来了，就部署相应的 Web 应用。
    因此 HostConfig 做的事情都是比较“宏观”的，它不会去检查具体类文件或者资源文件是否有变化，而是检查 Web 应用目录级别的变化。

热加载的粒度比较小，主要是针对类文件的更新，通过创建新的类加载器来实现重新加载。
而热部署是针对整个 Web 应用的，Tomcat 会将原来的 Context 对象整个销毁掉，再重新创建 Context 容器对象。

热加载和热部署的实现都离不开后台线程的周期性检查，Tomcat 在基类 ContainerBase 中统一实现了后台线程的处理逻辑，
并在顶层容器 Engine 启动后台线程，这样子容器组件甚至各种通用组件都不需要自己去创建后台线程，这样的设计显得优雅整洁。

为什么 Host 容器不通过重写 backgroundProcess 方法来实现热部署呢？
  因为这种方式的传递方向是从父容器到子容器，而HOST容器部署依赖Context容器部署完毕，才能部署应用，
    也就是先要子容器Context完成热部署后才能Host容器进行部署。所以针对这种情况，提供了周期性事件机制。

  Host的周期性任务比较简单，只要检查部署是否有更新；而Context组件那样，周期性任务比较复杂，不得不重写父类的方法。
