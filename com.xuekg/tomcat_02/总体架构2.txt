容器的层次结构
  Tomcat 设计了 4 种容器，分别是 Engine、Host、Context 和 Wrapper。这 4 种容器不是平行关系，而是父子关系。
为什么这么整？
  Tomcat 通过一种分层的架构，使得 Servlet 容器具有很好的灵活性。

  Context 表示一个 Web 应用程序；Wrapper 表示一个 Servlet，一个 Web 应用程序中可能会有多个 Servlet；
  Host 代表的是一个虚拟主机，或者说一个站点，可以给 Tomcat 配置多个虚拟主机地址，
  而一个虚拟主机下可以部署多个 Web 应用程序；Engine 表示引擎，用来管理多个虚拟站点，一个 Service 最多只能有一个 Engine。

  public interface Container extends Lifecycle {
    public void setName(String name);
    public Container getParent();
    public void setParent(Container container);
    public void addChild(Container child);
    public void removeChild(Container child);
    public Container findChild(String name);
  }

请求定位 (Servlet 的过程 Tomcat 是用 Mapper 组件来完成这个任务的)
  它的工作原理是：Mapper 组件里保存了 Web 应用的配置信息，其实就是容器组件与访问路径的映射关系，
  比如 Host 容器里配置的域名、Context 容器里的 Web 应用路径，以及 Wrapper 容器里 Servlet 映射的路径，
  你可以想象这些配置信息就是一个多层次的 Map。

  1.首先，根据协议和端口号选定 Service 和 Engine。
  2.然后，根据域名选定 Host。
  3.之后，根据 URL 路径找到 Context 组件。
  4.最后，根据 URL 路径找到 Wrapper（Servlet）。
  
  这个调用过程具体是怎么实现的呢？答案是使用 Pipeline-Valve 管道。
  Pipeline-Valve 是责任链模式，责任链模式是指在一个请求处理的过程中有很多处理者依次对请求进行处理，
  每个处理者负责做自己相应的处理，处理完之后将再调用下一个处理者继续处理。

  Valve 表示一个处理点，比如权限认证和记录日志。
  public interface Valve {
    public Valve getNext();
    public void setNext(Valve valve);
    public void invoke(Request request, Response response)
  }

  Pipeline 中维护了 Valve 链表
  public interface Pipeline extends Contained {
    public void addValve(Valve valve);
    public Valve getBasic();
    public void setBasic(Valve valve);
    public Valve getFirst();
  }

  Wrapper 容器的最后一个 Valve 会创建一个 Filter 链，并调用 doFilter() 方法，最终会调到 Servlet 的 service 方法。

  那 Valve 和 Filter 有什么区别吗？它们的区别是：
    1.Valve 是 Tomcat 的私有机制，与 Tomcat 的基础架构 /API 是紧耦合的。Servlet API 是公有的标准，所有的 Web 容器包括 Jetty 都支持 Filter 机制。
    2.另一个重要的区别是 Valve 工作在 Web 容器级别，拦截所有应用的请求；而 Servlet Filter 工作在应用级别，只能拦截某个 Web 应用的所有请求。
      如果想做整个 Web 容器的拦截器，必须通过 Valve 来实现。

你可以通过web.xml配置一个或多个Filter，Servlet容器在调用Servlet的service之前，需要调用这些Filter，
于是把这些Filter创建出来，形成链表，依次调用，这个Filter链中的最后一个Filter会负责调用Servlet的service方法。
  doGet:22, HelloServlet (servlet)
  service:635, HttpServlet (javax.servlet.http)
  service:742, HttpServlet (javax.servlet.http)
  internalDoFilter:231, ApplicationFilterChain (org.apache.catalina.core)
  doFilter:166, ApplicationFilterChain (org.apache.catalina.core)
  invoke:199, StandardWrapperValve (org.apache.catalina.core)
  invoke:96, StandardContextValve (org.apache.catalina.core)
  invoke:493, AuthenticatorBase (org.apache.catalina.authenticator)
  invoke:140, StandardHostValve (org.apache.catalina.core)
  invoke:81, ErrorReportValve (org.apache.catalina.valves)
  invoke:87, StandardEngineValve (org.apache.catalina.core)
  service:342, CoyoteAdapter (org.apache.catalina.connector)
  service:800, Http11Processor (org.apache.coyote.http11)
  process:66, AbstractProcessorLight (org.apache.coyote)
  process:806, AbstractProtocol$ConnectionHandler (org.apache.coyote)
  doRun:1498, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)
  run:49, SocketProcessorBase (org.apache.tomcat.util.net)
  runWorker:1149, ThreadPoolExecutor (java.util.concurrent)
  run:624, ThreadPoolExecutor$Worker (java.util.concurrent)
  run:61, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)
  run:748, Thread (java.lang)