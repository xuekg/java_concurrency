HTTP:
  HTTP 协议是浏览器与服务器之间的数据传送协议。
  作为应用层协议，HTTP 是基于 TCP/IP 协议来传递数据的（HTML 文件、图片、查询结果等），
  HTTP 协议不涉及数据包（Packet）传输，主要规定了客户端和服务器之间的通信格式。

Cookie 和 Session
  Cookie 是 HTTP 报文的一个请求头，Web 应用可以将用户的标识信息或者其他一些信息（用户名等）存储在 Cookie 中。
  用户经过验证之后，每次 HTTP 请求报文中都包含 Cookie，这样服务器读取这个 Cookie 请求头就知道用户是谁了。
  Cookie 本质上就是一份存储在用户本地的文件，里面包含了每次请求中都需要传递的信息。

  由于 Cookie 以明文的方式存储在本地，而 Cookie 中往往带有用户信息，这样就造成了非常大的安全隐患。
  而 Session 的出现解决了这个问题，Session 可以理解为服务器端开辟的存储空间，里面保存了用户的状态，
  用户信息以 Session 的形式存储在服务端。当用户请求到来时，服务端可以把用户的请求和用户的 Session 对应起来。
  那么 Session 是怎么和请求对应起来的呢？
      答案是通过 Cookie，
      浏览器在 Cookie 中填充了一个 Session ID 之类的字段用来标识请求。+
  具体工作过程是这样的：
    服务器在创建 Session 的同时，会为该 Session 生成唯一的 Session ID，当浏览器再次发送请求的时候，
    会将这个 Session ID 带上，服务器接受到请求之后就会依据 Session ID 找到相应的 Session，找到 Session 后，
    就可以在 Session 中获取或者添加内容了。而这些内容只会保存在服务器中，发到客户端的只有 Session ID，
    这样相对安全，也节省了网络流量，因为不需要在 Cookie 中存储大量用户信息。

    sessionid是服务端生成的，服务端通过set-cookie放在http的响应头里，然后浏览器写到cookie里，后续每次请求就会自动带上来了

由于 HTTP 是无状态的协议，为了识别请求是哪个用户发过来的，出现了 Cookie 和 Session 技术。
Cookie 本质上就是一份存储在用户本地的文件，里面包含了每次请求中都需要传递的信息；
Session 可以理解为服务器端开辟的存储空间，里面保存的信息用于保持状态。
作为 Web 容器，Tomcat 负责创建和管理 Session，并提供了多种持久化方案来存储 Session。

在 HTTP/1.0 时期，每次 HTTP 请求都会创建一个新的 TCP 连接，请求完成后之后这个 TCP 连接就会被关闭。
这种通信模式的效率不高，所以在 HTTP/1.1 中，引入了 HTTP 长连接的概念，使用长连接的 HTTP 协议，
会在响应头加入 Connection:keep-alive。这样当浏览器完成一次请求后，浏览器和服务器之间的 TCP 连接不会关闭，
再次访问这个服务器上的网页时，浏览器会继续使用这一条已经建立的连接，也就是说两个请求可能共用一个 TCP 连接。

我一直不太理解什么是无状态，restful经常听说是无状态的，是一个概念吗？
 我的理解是REST是一种架构风格：将网络上的信息实体看作是资源，可以是图片、文件、一个服务...资源用URI统一标识，
 URI中没有动词哦，这是因为它是资源的标识，那怎么操作这些资源呢，于是定义一些动作：GET、POST、PUT和DELETE。
 通过URI+动作来操作一个资源。所谓的无状态说的是，为了完成一个操作，请求里包含了所有信息，
 你可以理解为服务端不需要保存请求的状态，也就是不需要保存session，没有session的好处是带来了服务端良好的可伸缩性，
 方便failover，请求被LB转到不同的server实例上没有差别。
 从这个角度看，正是有了REST架构风格的指导，才有了HTTP的无状态特性，
 顺便提一下，REST和HTTP1.1出自同一人之手。但是理想是丰满的，现实是骨感的，
 为了方便开发，大多数复杂的Web应用不得不在服务端保存Session。
 为了尽量减少Session带来的弊端，往往将Session集中存储到Redis上，而不是直接存储在server实例上.

老师，您好，现在的web容器都支持将session存储在第三方中间件（如redis）中，为什么很多公司喜欢绕过容器，直接在应用中将会话数据存入中间件中？
 用Web容器的Session方案需要侵入特定的Web容器，用Spring Session可能比较简单，不需要跟特定的Servlet容器打交道。
 这正是Spring喜欢做的事情，它使得程序员甚至感觉不到Servlet容器的存在，可以专心开发Web应用,
 但是Spring到底做了什么，Spring Session是如何实现的，我们还是有必要了解了解~
 其实它是通过Servlet规范中的Filter机制拦截了所有Servlet请求，偷梁换柱，将标准的Servlet请求对象包装了一下，
 换成它自己的Request包装类对象，这样当程序员通过包装后的Request对象的getSession方法拿Session时，
 是通过Spring拿Session，没Web容器什么事了。