一键式启停：LifeCycle 接口
  设计就是要找到系统的变化点和不变点。
  这里的不变点就是每个组件都要经历创建、初始化、启动这几个过程，这些状态以及状态的转化是不变的。
  而变化点是每个具体组件的初始化方法，也就是启动方法是不一样的。
  因此，我们把不变点抽象出来成为一个接口，这个接口跟生命周期有关，叫作 LifeCycle。
  LifeCycle 接口里应该定义这么几个方法：init()、start()、stop() 和 destroy()，每个具体的组件去实现这些方法。

  理所当然，在父组件的 init() 方法里需要创建子组件并调用子组件的 init() 方法。
  同样，在父组件的 start() 方法里也需要调用子组件的 start() 方法，
  因此调用者可以无差别的调用各组件的 init() 方法和 start() 方法，这就是组合模式的使用，
  并且只要调用最顶层组件，也就是 Server 组件的 init() 和 start() 方法，整个 Tomcat 就被启动起来了。

可扩展性：LifeCycle 事件
  我们注意到，组件的 init() 和 start() 调用是由它的父组件的状态变化触发的，上层组件的初始化会触发子组件的初始化，
  上层组件的启动会触发子组件的启动，因此我们把组件的生命周期定义成一个个状态，把状态的转变看作是一个事件。
  而事件是有监听器的，在监听器里可以实现一些逻辑，并且监听器也可以方便的添加和删除，这就是典型的观察者模式。
  添加监听器和删除监听器
    public void addLifecycleListener(LifecycleListener listener);
    public LifecycleListener[] findLifecycleListeners();
    public void removeLifecycleListener(LifecycleListener listener);
重用性：LifeCycleBase 抽象基类
  Tomcat 定义一个基类 LifeCycleBase 来实现 LifeCycle 接口，把一些公共的逻辑放到基类中去，
  比如生命状态的转变与维护、生命事件的触发以及监听器的添加和删除等，
  而子类就负责实现自己的初始化、启动和停止等方法。
  为了避免跟基类中的方法同名，我们把具体子类的实现方法改个名字，在后面加上 Internal，叫 initInternal()、startInternal() 等。

  LifeCycleBase 实现了 LifeCycle 接口中所有的方法，还定义了相应的抽象方法交给具体子类去实现，这是典型的模板设计模式。
  @Override
  public final synchronized void init() throws LifecycleException {
      //1. 状态检查
      if (!state.equals(LifecycleState.NEW)) {
          invalidTransition(Lifecycle.BEFORE_INIT_EVENT);
      }
      try {
          //2. 触发 INITIALIZING 事件的监听器
          setStateInternal(LifecycleState.INITIALIZING, null, false);
          
          //3. 调用具体子类的初始化方法
          initInternal();
          
          //4. 触发 INITIALIZED 事件的监听器
          setStateInternal(LifecycleState.INITIALIZED, null, false);
      } catch (Throwable t) {
        ...
      }
  }
  什么时候、谁把监听器注册进来的呢？
    Tomcat 自定义了一些监听器，这些监听器是父组件在创建子组件的过程中注册到子组件的。
      比如 MemoryLeakTrackingListener 监听器，用来检测 Context 容器中的内存泄漏，
      这个监听器是 Host 容器在创建 Context 容器时注册到 Context 中的。
    我们还可以在 server.xml 中定义自己的监听器，Tomcat 在启动时会解析 server.xml，创建监听器并注册到容器组件。

生周期管理总体类图
  StandardServer、StandardService 等是 Server 和 Service 组件的具体实现类，它们都继承了 LifeCycleBase。
  StandardEngine、StandardHost、StandardContext 和 StandardWrapper 是相应容器组件的具体实现类，
  因为它们都是容器，所以继承了 ContainerBase 抽象基类，而 ContainerBase 实现了 Container 接口，也继承了 LifeCycleBase 类，
  它们的生命周期管理接口和功能接口是分开的，这也符合设计中接口分离的原则。

Tomcat 为了实现一键式启停以及优雅的生命周期管理，并考虑到了可扩展性和可重用性，
将面向对象思想和设计模式发挥到了极致，分别运用了组合模式、观察者模式、骨架抽象类和模板方法
