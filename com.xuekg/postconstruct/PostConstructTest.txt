package postconstruct;

@Service
public class ServiceAImpl {

	@Autowired
	private ServiceBImpl serviceB;

	public void getBatchPropertyIdByRuleIdAndDtoBatch() throws Exception{
		serviceB.getBatchPropertyId();
	}

	public ServiceAImpl() {
		System.out.println("此时b还未被注入: serviceB = " + serviceB);
	}

	@PostConstruct
	public void init(){
		System.out.println("@PostConstruct将在依赖注入完成后被自动调用: serviceB = " + serviceB);
	}
}

public class PostConstructTest {
  public static void main(String[] args) {
		AnnotationConfigApplicationContext ac
				= new AnnotationConfigApplicationContext(AppConfig.class);
		ServiceAImpl bean = ac.getBean(ServiceAImpl.class);

		/**
		 *
		 * @PostConstruct注解好多人以为是Spring提供的。其实是Java自己的注解。
		 * Java中该注解的说明：@PostConstruct该注解被用来修饰一个非静态的void（）方法。
		 * 被@PostConstruct修饰的方法会在服务器加载Servlet的时候运行，
		 * 并且只会被服务器执行一次。PostConstruct在构造函数之后执行，init（）方法之前执行。
		 *
		 * 通常我们会是在Spring框架中使用到@PostConstruct注解 该注解的方法在整个Bean初始化中的执行顺序：
		 *
		 * Constructor(构造方法) -> @Autowired(依赖注入) -> @PostConstruct(注释的方法)
		 *
		 * 那么Java提供的@PostConstruct注解，Spring是如何实现的呢？
		 * 需要先学习下BeanPostProcessor这个接口：
		 * public interface BeanPostProcessor {
		 *
		 *      * 任何Bean实例化，并且Bean已经populated(填充属性) 就会回调这个方法
		 *		Object postProcessBeforeInitialization (Object bean, String beanName) throws BeansException;
		 *
		 *      * 任何Bean实例化，并且Bean已经populated(填充属性) 就会回调这个方法
		 *		Object postProcessAfterInitialization (Object bean, String beanName) throws BeansException;
		 *
		 * AbstractApplicationContext.finishBeanFactoryInitialization(...);
		 *     beanFactory.preInstantiateSingletons();
		 *        DefaultListableBeanFactory.getBean(beanName);
		 *           AbstractBeanFactory.doGetBean();
		 *             AbstractAutowireCapableBeanFactory.createBean(....)
		 *                 populateBean(beanName, mbd, instanceWrapper);
		 *                 initializeBean(...)
		 *                  //调用BeanPostProcessor.postProcessBeforeInitialization()方法
		 *                   applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
		 *                  //调用BeanPostProcessor.postProcessBeforeInitialization()方法
		 *                   applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
		 *
		 *
		 * CommonAnnotationBeanPostProcessor的父类InitDestroyAnnotationBeanPostProcessor()
		 *  InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization()
		 *     InitDestroyAnnotationBeanPostProcessor.findLifecycleMetadata()
		 *         // 组装生命周期元数据
		 *         InitDestroyAnnotationBeanPostProcessor.buildLifecycleMetadata()
		 *             // 查找@PostConstruct注释的方法
		 *             InitDestroyAnnotationBeanPostProcessor.initAnnotationType
		 *             // 查找@PreDestroy注释方法
		 *             InitDestroyAnnotationBeanPostProcessor.destroyAnnotationType
		 *
		 *   最终在org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor
		 *   	  #postProcessBeforeInitialization(java.lang.Object, java.lang.String)
		 *   这里反射调用
		 *  metadata.invokeInitMethods(bean, beanName);
		 */
	}
}