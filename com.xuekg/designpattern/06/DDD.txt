我们平时做 Web 项目的业务开发，大部分都是基于贫血模型的 MVC 三层架构，在专栏中
我把它称为传统的开发模式。之所以称之为“传统”，是相对于新兴的基于充血模型的
DDD 开发模式来说的。基于贫血模型的传统开发模式，是典型的面向过程的编程风格。相
反，基于充血模型的 DDD 开发模式，是典型的面向对象的编程风格。

不过，DDD 也并非银弹。对于业务不复杂的系统开发来说，基于贫血模型的传统开发模式
简单够用，基于充血模型的 DDD 开发模式有点大材小用，无法发挥作用。相反，对于业务
复杂的系统开发来说，基于充血模型的 DDD 开发模式，因为前期需要在设计上投入更多时
间和精力，来提高代码的复用性和可维护性，所以相比基于贫血模型的开发模式，更加有优
势。

基于充血模型的 DDD 开发模式跟基于贫血模型的传统开发模式相比，主要区别在 Service
层。在基于充血模型的开发模式下，我们将部分原来在 Service 类中的业务逻辑移动到了一
个充血的 Domain 领域模型中，让 Service 类的实现依赖这个 Domain 类。
在基于充血模型的 DDD 开发模式下，Service 类并不会完全移除，而是负责一些不适合放
在 Domain 类中的功能。比如，负责与 Repository 层打交道、跨领域模型的业务聚合功
能、幂等事务等非功能性的工作。
基于充血模型的 DDD 开发模式跟基于贫血模型的传统开发模式相比，Controller 层和
Repository 层的代码基本上相同。这是因为，Repository 层的 Entity 生命周期有限，
Controller 层的 VO 只是单纯作为一种 DTO。两部分的业务逻辑都不会太复杂。业务逻辑
主要集中在 Service 层。所以，Repository 层和 Controller 层继续沿用贫血模型的设计思
路是没有问题的。