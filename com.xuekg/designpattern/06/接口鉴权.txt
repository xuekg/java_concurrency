需求：
为了保证接口调用的安全性，我们希望设计实现一个接口调用鉴权功能，只有经过认
证之后的系统才能调用我们的接口，没有认证过的系统调用我们的接口会被拒绝。我希望由
你来负责这个任务的开发，争取尽快上线。

1.调用方进行接口请求的时候，将 URL、AppID、密码、时间戳拼接在一起，通过加密算
法生成 token，并且将 token、AppID、时间戳拼接在 URL 中，一并发送到微服务端。
2.微服务端在接收到调用方的接口请求之后，从请求中拆解出 token、AppID、时间戳。
3.微服务端首先检查传递过来的时间戳跟当前时间，是否在 token 失效时间窗口内。如果
已经超过失效时间，那就算接口调用鉴权失败，拒绝接口调用请求。
4.如果 token 验证没有过期失效，微服务端再从自己的存储中，取出 AppID 对应的密
码，通过同样的 token 生成算法，生成另外一个 token，与调用方传递过来的 token 进
行匹配；如果一致，则鉴权成功，允许接口调用，否则就拒绝接口调用。

针对框架、类库、组件等非业务系统的开发，其中一个比较大的难点就是，需求一般都比较
抽象、模糊，需要你自己去挖掘，做合理取舍、权衡、假设，把抽象的问题具象化，最终产
生清晰的、可落地的需求定义。需求定义是否清晰、合理，直接影响了后续的设计、编码实
现是否顺畅。所以，作为程序员，你一定不要只关心设计与实现，前期的需求分析同等重
要。
需求分析的过程实际上是一个不断迭代优化的过程。我们不要试图一下就能给出一个完美的
解决方案，而是先给出一个粗糙的、基础的方案，有一个迭代的基础，然后再慢慢优化，这
样一个思考过程能让我们摆脱无从下手的窘境。

面向对象分析的产出是详细的需求描述。面向对象设计的产出是类。在面向对象设计这一环
节中，我们将需求描述转化为具体的类的设计。这个环节的工作可以拆分为下面四个部分。
1. 划分职责进而识别出有哪些类
  根据需求描述，我们把其中涉及的功能点，一个一个罗列出来，然后再去看哪些功能点职责
  相近，操作同样的属性，可否归为同一个类。
2. 定义类及其属性和方法
  我们识别出需求描述中的动词，作为候选的方法，再进一步过滤筛选出真正的方法，把功能
  点中涉及的名词，作为候选属性，然后同样再进行过滤筛选。
3. 定义类与类之间的交互关系
  UML 统一建模语言中定义了六种类之间的关系。它们分别是：泛化、实现、关联、聚合、
  组合、依赖。我们从更加贴近编程的角度，对类与类之间的关系做了调整，保留四个关系：
  泛化、实现、组合、依赖。
4. 将类组装起来并提供执行入口
  我们要将所有的类组装在一起，提供一个执行入口。这个入口可能是一个 main() 函数，也
  可能是一组给外部用的 API 接口。通过这个入口，我们能触发整个代码跑起来。