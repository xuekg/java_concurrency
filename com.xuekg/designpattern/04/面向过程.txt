1. 什么是面向过程编程与面向过程编程语言？
  面向对象编程是一种编程范式或编程风格。它以类或对象作为组织代码的基本单元，并
  将封装、抽象、继承、多态四个特性，作为代码设计和实现的基石 。
  面向对象编程语言是支持类或对象的语法机制，并有现成的语法机制，能方便地实现面
  向对象编程四大特性（封装、抽象、继承、多态）的编程语言

  面向过程编程也是一种编程范式或编程风格。它以过程（可以为理解方法、函数、操
  作）作为组织代码的基本单元，以数据（可以理解为成员变量、属性）与方法相分离为
  最主要的特点。面向过程风格是一种流程化的编程风格，通过拼接一组顺序执行的方法
  来操作数据完成一项功能。
  面向过程编程语言首先是一种编程语言。它最大的特点是不支持类和对象两个语法概
  念，不支持丰富的面向对象编程特性（比如继承、多态、封装），仅支持面向过程编
  程
2. 面向对象编程相比面向过程编程有哪些优势？
  .对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网
  状结构。面向对象编程比起面向过程编程，更能应对这种复杂类型的程序开发。
  .面向对象编程相比面向过程编程，具有更加丰富的特性（封装、抽象、继承、多态）。
  利用这些特性编写出来的代码，更加易扩展、易复用、易维护。
  .从编程语言跟机器打交道的方式的演进规律中，我们可以总结出：面向对象编程语言比
  起面向过程编程语言，更加人性化、更加高级、更加智能
3. 为什么说面向对象编程语言比面向过程编程语言更高级？
4. 有哪些看似是面向对象实际是面向过程风格的代码？
  1. 滥用 getter、setter 方法
  在设计实现类的时候，除非真的需要，否则尽量不要给属性定义 setter 方法。除此之外，
  尽管 getter 方法相对 setter 方法要安全些，但是如果返回的是集合容器，那也要防范集合
  内部数据被修改的风险。
  2.Constants 类、Utils 类的设计问题
  对于这两种类的设计，我们尽量能做到职责单一，定义一些细化的小类，比如
  RedisConstants、FileUtils，而不是定义一个大而全的 Constants 类、Utils 类。除此之
  外，如果能将这些类中的属性和方法，划分归并到其他业务类中，那是最好不过的了，能极
  大地提高类的内聚性和代码的可复用性。
  3. 基于贫血模型的开发模式
  关于这一部分，我们只讲了为什么这种开发模式是彻彻底底的面向过程编程风格的。这是因
  为数据和操作是分开定义在 VO/BO/Entity 和 Controler/Service/Repository 中的。今
  天，你只需要掌握这一点就可以了.
5. 在面向对象编程中，为什么容易写出面向过程风格的代码？
  面向对象编程要比面向过程编程难一些。在面向对象编程中，类的设计还是挺需
  要技巧，挺需要一定设计经验的。你要去思考如何封装合适的数据和方法到一个类里，如何
  设计类之间的关系，如何设计类之间的交互等等诸多设计问题。
6. 面向过程编程和面向过程编程语言就真的无用武之地了吗？
  如果我们开发的是微小程序，或者是一个数据处理相关的代码，以算法为
  主，数据为辅，那脚本式的面向过程的编程风格就更适合一些。