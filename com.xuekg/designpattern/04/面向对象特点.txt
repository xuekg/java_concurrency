1. 关于封装特性
  封装也叫作信息隐藏或者数据访问保护。类通过暴露有限的访问接口，授权外部仅能通过类
  提供的方式来访问内部信息或者数据。它需要编程语言提供权限访问控制语法来支持，例如
  Java 中的 private、protected、public 关键字。封装特性存在的意义，一方面是保护数据
  不被随意修改，提高代码的可维护性；另一方面是仅暴露有限的必要接口，提高类的易用
  性。
2. 关于抽象特性
  封装主要讲如何隐藏信息、保护数据，那抽象就是讲如何隐藏方法的具体实现，让使用者只
  需要关心方法提供了哪些功能，不需要知道这些功能是如何实现的。抽象可以通过接口类或
  者抽象类来实现，但也并不需要特殊的语法机制来支持。抽象存在的意义，一方面是提高代
  码的可扩展性、维护性，修改实现不需要改变定义，减少代码的改动范围；另一方面，它也
  是处理复杂系统的有效手段，能有效地过滤掉不必要关注的信息。
3. 关于继承特性
  继承是用来表示类之间的 is-a 关系，分为两种模式：单继承和多继承。单继承表示一个子
  类只继承一个父类，多继承表示一个子类可以继承多个父类。为了实现继承这个特性，编程
  语言需要提供特殊的语法机制来支持。继承主要是用来解决代码复用的问题。
4. 关于多态特性
  多态是指子类可以替换父类，在实际的代码运行过程中，调用子类的方法实现。多态这种特
  性也需要编程语言提供特殊的语法机制来实现，比如继承、接口类、duck-typing。多态可
  以提高代码的扩展性和复用性，是很多设计模式、设计原则、编程技巧的代码实现基础。

java不支持多继承
  熟悉 Java 的小伙伴应该知道 Java 有个很重要的特性就是它不支持多重继承。
  但是使用过其他面向对象编程语言的童鞋会知道，有的语言是支持多重继承的，比如 C++，Python.
  我们来看看 ”Java 之父“：James Gosling 老爷子说过的这样一句话。
  JAVA omits many rarely used, poorly understood, 
  confusing features of C++ that in our experience bring more grief than beneﬁt.
   This primarily consists of operator overloading (although it does have method overloading), 
   multiple inheritance, and extensive automatic coercions.
  简单的翻译一下：Java 去除了一些 C++ 中很少用、而且被经常误解而错用的功能，
  如操作符的重载(尽管 Java 仍旧保留方法的重载)，多重继承，以及广泛的自动强迫同型(extensive automatic coercions)。
  那么多重继承为什么会被错用呢？或者说是多重继承容易出现什么问题？我们来看一下下面这个比较著名的 “ 多重继承的钻石问题 ”

  我们假设类 A、B、C 内的方法都是 public 的，以方便讨论。
  类 B 和类 C 继承自类 A，且都重写了类 A 中的同一个方法，而类 D 同时继承了类 B 和类 C，那么此时类 D 会继承 B、C 的方法，
  那对于 B、C 重写的 A 中的方法，类 D 会继承哪一个呢？
  
  看到这里，相信大家也明白了多重继承会导致这种有歧义的情况存在。
  在 C++ 和 Python 中又称这种情况为二义性，对此 C++ 的解决办法是在调用前指定类名，或者使用同名覆盖。
  而 Python 也是需要指明需要使用的是哪个父类的方法。
  并且其实，这两种语言在支持多重继承这个角度上也都建议要把这种多个父类中的出现同名方法的情况给尽量避免掉。
  所以考虑到这种二义性问题，Java 不支持多重继承。