Zookeeper Atomic Broadcast 原子消息广播协议
是一种特别为zookeeper设计的崩溃可恢复的原子消息广播算法

基于该协议，zookeeper实现了一种主备模式的系统架构来保持
集群中各副本之间数据的一致性。使用一个单一的主进程来接收
并处理客户端的所有事务请求，并采用ZAB的原子广播协议，将
服务器数据的状态变更已事务Proposal的形式广播到所有的副本
进程上去。

包括两种基本的模式：崩溃恢复和消息广播
消息广播
  针对客户端的事务请求，Leader服务器会为其生成对应的事务
  Proposal,并将其发送给集群中的其他所有机器，然后再分别
  收集各自的选票，最后进行事务的提交。
  消息广播协议是基于具有FIFO特性的TCP协议来进行网络通信的。
  移除了中断逻辑，无法处理leader服务器崩溃退出而带来的数据不一致问题，
  因此添加了崩溃恢复模式，这样做简化了二阶段提交，意味着我们在过半的
  follower反馈过ack之后就可以开始提交事务Proposal了，不用等到集群中
  所有的follower服务器都反馈。

  在消息广播过程中，leader会为每一个follower都各自分配一个单独的队列。
  然后将需要广播的事务proposal依次放入队列中，并且根据FIFO策略进行消息
  发送。每一个follower在接收到这个事务proposal后，会首先将其以事务日志
  的形式写入到本地磁盘中去，并且在成功写入后反馈给leader一个ack响应。
  当leader收到过半follower的ack响应后，会广播一个commit消息给所有的
  follower通知事务提交，同时leader自身本身也会完成事务提交。每一个
  follower服务器接收到commit消息后，完成对事务的提交。

崩溃恢复
  ZAB需要确保那些已经在leader服务器上提交的事务最终被所有服务器都提交。
    崩溃恢复过程需要保证已经被leader提交的proposal也能够被所有的follower提交。
  ZAB协议需要确保丢弃那些只在leader服务器上被丢弃的事务
  leader选举算法：
    能够保证提交已经被leader提交的事务：选举出的leader服务器拥有集群中所有服务器最高编号（ZXID最大）的事务proposal
    能够保证丢弃已经被跳过的事务
  选举完成之后要进行数据同步
  只有follower服务器将所有其尚未同步的事务proposal都从leader服务器上同步过来并
  成功应用到本地数据库中后，leader服务器就会将该follower服务器加入到真正的可用follower列表中
  并开始之后的其他流程。
  zookeeper默认使用3888端口进行leader选举过程中的投票通信