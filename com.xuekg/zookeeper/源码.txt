1.4 源码阅读指北
  服务端启动，集群 QuorumPeerMain#main，单机 ZooKeeperServerMain#main
  客户端 ZooKeeper
  解析配置相关，QuorumPeerConfig#parse
  内存模型（小红本）DataTree
  回调通知（小黄本）IWatchManager 查看该接口实现
    默认实现 WatchManager
    优化方案 WatchManagerOptimized
  选举 FastLeaderElection#lookForLeader
  服务端实例，设置流水线 setupRequestProcessors 方法
    Leader 节点 LeaderZooKeeperServer
    Follower 节点 FollowerZooKeeperServer
    Observer 节点 ObserverZooKeeperServer
  各个流水线员工 RequestProcessor 查看该接口的实现
  持久化 log FileTxnLog，snapshot FileSnap
  会话管理 SessionTrackerImpl#run
  协议 Record 查看该接口的实现

二、ZK 中应用到的设计模式
ZK 本身就是分布式的应用，也是优秀的开源项目，我这里就简单聊聊我在阅读源码中看到的应用在 ZK 里的设计模式吧
2.1 生产者消费者
这个是 ZK 中非常有代表性的设计模式应用了，ZK 本身是 C/S 架构的设计，请求就是客户端发送给服务端数据，
响应则是服务端发送给客户端数据，而 ZK 实现一些功能并不是通过线性顺序的去调用不同的方法去完成的，
通常会由生产者线程，阻塞队列和消费者线程组成，生产者线程将上游收到的一些请求对象放入阻塞队列，
当前的方法就返回了，之后由消费者线程通过循环不停的从阻塞队列中获取，再完成之后的业务逻辑。举例：

PrepRequestProcessor，阻塞队列是 submittedRequests
SyncRequestProcessor，阻塞队列是 queuedRequests
2.2 工厂模式
有一些接口的实现，ZK 本身提供了默认的选择，但是如果使用者在配置中配置了其他的实现的话，ZK 的工厂就会自动去创建那些其他的实现。举例：

在创建 ClientCnxnSocket 时，会根据 zookeeper.clientCnxnSocket 的配置去选择客户端的 IO 实现
在创建 IWatchManager 时，会根据 zookeeper.watchManagerName 的配置去选择服务端的 watch 管理实现
在创建 ServerCnxnFactory 时，会根据 zookeeper.serverCnxnFactory 的配置去选择服务端的 IO 工厂实现
2.3 责任链模式
之前有学习过，ZK 服务端业务逻辑处理是通过将一个个 XxxProcessor 串起来实现的，Processor 彼此不关心调用顺序，
仅仅通过 nextProcessor 关联，不同的服务端角色也可以通过这种方式极大的复用代码

单机模式下：PrepRequestProcessor -> SyncRequestProcessor -> FinalRequestProcessor
集群模式下 Leader ：LeaderRequestProcessor -> PrepRequestProcessor -> ProposalRequestProcessor ->
   CommitProcessor -> Leader.ToBeAppliedRequestProcessor -> FinalRequestProcessor
集群模式下 Follower ：FollowerRequestProcessor -> CommitProcessor -> FinalRequestProcessor
集群模式下 Observer ：ObserverRequestProcessor -> CommitProcessor -> FinalRequestProcessor
2.4 策略模式
zookeeper.snapshot.compression.method 可以配置成不同的 snapshot 压缩算法，当需要生成 snapshot 文件的时候，
会根据不同的压缩算法去执行：

gz：GZIPInputStream
snappy：SnappyInputStream
默认：BufferedInputStream
2.5 装饰器模式
还是刚刚的压缩算法，对外提供的是 CheckedInputStream 的统一处理对象，使用 CheckedInputStream 将上面三种压缩实现包装起来，
这些对象全部都是 InputStream 的子类

switch (根据不同的配置) {
  // 策略模式的体现
  case GZIP:
    is = new GZIPInputStream(fis);
    break;
  case SNAPPY:
    is = new SnappyInputStream(fis);
    break;
  case CHECKED:
  default:
    is = new BufferedInputStream(fis);
}
// 都被包装进了 CheckedInputStream
// 装饰器模式的体现
return new CheckedInputStream(is, new Adler32()); 